<?php
/**
 * TAdres
 *
 * PHP version 5
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KSeF API
 *
 * API do systemu KSeF
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KsefApi\Model;

use \ArrayAccess;
use \KsefApi\ObjectSerializer;

/**
 * TAdres Class Doc Comment
 *
 * @category Class
 * @description Informacje opisujÄ…ce adres
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TAdres implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TAdres';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kod_kraju' => '\KsefApi\Model\TKodKraju',
        'adres_l1' => '\KsefApi\Model\TZnakowy512',
        'adres_l2' => '\KsefApi\Model\TZnakowy512',
        'gln' => '\KsefApi\Model\TGLN'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kod_kraju' => null,
        'adres_l1' => null,
        'adres_l2' => null,
        'gln' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kod_kraju' => 'KodKraju',
        'adres_l1' => 'AdresL1',
        'adres_l2' => 'AdresL2',
        'gln' => 'GLN'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kod_kraju' => 'setKodKraju',
        'adres_l1' => 'setAdresL1',
        'adres_l2' => 'setAdresL2',
        'gln' => 'setGln'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kod_kraju' => 'getKodKraju',
        'adres_l1' => 'getAdresL1',
        'adres_l2' => 'getAdresL2',
        'gln' => 'getGln'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kod_kraju'] = isset($data['kod_kraju']) ? $data['kod_kraju'] : null;
        $this->container['adres_l1'] = isset($data['adres_l1']) ? $data['adres_l1'] : null;
        $this->container['adres_l2'] = isset($data['adres_l2']) ? $data['adres_l2'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['kod_kraju'] === null) {
            $invalidProperties[] = "'kod_kraju' can't be null";
        }
        if ($this->container['adres_l1'] === null) {
            $invalidProperties[] = "'adres_l1' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kod_kraju
     *
     * @return \KsefApi\Model\TKodKraju
     */
    public function getKodKraju()
    {
        return $this->container['kod_kraju'];
    }

    /**
     * Sets kod_kraju
     *
     * @param \KsefApi\Model\TKodKraju $kod_kraju kod_kraju
     *
     * @return $this
     */
    public function setKodKraju($kod_kraju)
    {
        $this->container['kod_kraju'] = $kod_kraju;

        return $this;
    }

    /**
     * Gets adres_l1
     *
     * @return \KsefApi\Model\TZnakowy512
     */
    public function getAdresL1()
    {
        return $this->container['adres_l1'];
    }

    /**
     * Sets adres_l1
     *
     * @param \KsefApi\Model\TZnakowy512 $adres_l1 adres_l1
     *
     * @return $this
     */
    public function setAdresL1($adres_l1)
    {
        $this->container['adres_l1'] = $adres_l1;

        return $this;
    }

    /**
     * Gets adres_l2
     *
     * @return \KsefApi\Model\TZnakowy512
     */
    public function getAdresL2()
    {
        return $this->container['adres_l2'];
    }

    /**
     * Sets adres_l2
     *
     * @param \KsefApi\Model\TZnakowy512 $adres_l2 adres_l2
     *
     * @return $this
     */
    public function setAdresL2($adres_l2)
    {
        $this->container['adres_l2'] = $adres_l2;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return \KsefApi\Model\TGLN
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param \KsefApi\Model\TGLN $gln gln
     *
     * @return $this
     */
    public function setGln($gln)
    {
        $this->container['gln'] = $gln;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
