<?php
/**
 * TKodFormularza
 *
 * PHP version 5
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KSeF API
 *
 * API do systemu KSeF
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KsefApi\Model;

use \ArrayAccess;
use \KsefApi\ObjectSerializer;

/**
 * TKodFormularza Class Doc Comment
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TKodFormularza implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TKodFormularza';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kod_formularza' => 'string',
        'kod_systemowy' => 'string',
        'wersja_schemy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kod_formularza' => null,
        'kod_systemowy' => null,
        'wersja_schemy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kod_formularza' => 'kodFormularza',
        'kod_systemowy' => 'kodSystemowy',
        'wersja_schemy' => 'wersjaSchemy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kod_formularza' => 'setKodFormularza',
        'kod_systemowy' => 'setKodSystemowy',
        'wersja_schemy' => 'setWersjaSchemy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kod_formularza' => 'getKodFormularza',
        'kod_systemowy' => 'getKodSystemowy',
        'wersja_schemy' => 'getWersjaSchemy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const KOD_FORMULARZA_FA = 'FA';
    const KOD_SYSTEMOWY_FA_V2 = 'FA_V2';
    const WERSJA_SCHEMY__1_0_E = '1_0E';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKodFormularzaAllowableValues()
    {
        return [
            self::KOD_FORMULARZA_FA,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKodSystemowyAllowableValues()
    {
        return [
            self::KOD_SYSTEMOWY_FA_V2,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWersjaSchemyAllowableValues()
    {
        return [
            self::WERSJA_SCHEMY__1_0_E
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['kod_formularza'] = isset($data['kod_formularza']) ? $data['kod_formularza'] : null;
        $this->container['kod_systemowy'] = isset($data['kod_systemowy']) ? $data['kod_systemowy'] : null;
        $this->container['wersja_schemy'] = isset($data['wersja_schemy']) ? $data['wersja_schemy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKodFormularzaAllowableValues();
        if (!is_null($this->container['kod_formularza']) && !in_array($this->container['kod_formularza'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kod_formularza', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKodSystemowyAllowableValues();
        if (!is_null($this->container['kod_systemowy']) && !in_array($this->container['kod_systemowy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'kod_systemowy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWersjaSchemyAllowableValues();
        if (!is_null($this->container['wersja_schemy']) && !in_array($this->container['wersja_schemy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'wersja_schemy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kod_formularza
     *
     * @return string
     */
    public function getKodFormularza()
    {
        return $this->container['kod_formularza'];
    }

    /**
     * Sets kod_formularza
     *
     * @param string $kod_formularza kod_formularza
     *
     * @return $this
     */
    public function setKodFormularza($kod_formularza)
    {
        $allowedValues = $this->getKodFormularzaAllowableValues();
        if (!is_null($kod_formularza) && !in_array($kod_formularza, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kod_formularza', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kod_formularza'] = $kod_formularza;

        return $this;
    }

    /**
     * Gets kod_systemowy
     *
     * @return string
     */
    public function getKodSystemowy()
    {
        return $this->container['kod_systemowy'];
    }

    /**
     * Sets kod_systemowy
     *
     * @param string $kod_systemowy kod_systemowy
     *
     * @return $this
     */
    public function setKodSystemowy($kod_systemowy)
    {
        $allowedValues = $this->getKodSystemowyAllowableValues();
        if (!is_null($kod_systemowy) && !in_array($kod_systemowy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'kod_systemowy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['kod_systemowy'] = $kod_systemowy;

        return $this;
    }

    /**
     * Gets wersja_schemy
     *
     * @return string
     */
    public function getWersjaSchemy()
    {
        return $this->container['wersja_schemy'];
    }

    /**
     * Sets wersja_schemy
     *
     * @param string $wersja_schemy wersja_schemy
     *
     * @return $this
     */
    public function setWersjaSchemy($wersja_schemy)
    {
        $allowedValues = $this->getWersjaSchemyAllowableValues();
        if (!is_null($wersja_schemy) && !in_array($wersja_schemy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'wersja_schemy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['wersja_schemy'] = $wersja_schemy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
