<?php
/**
 * Faktura
 *
 * PHP version 5
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KSeF API
 *
 * API do systemu KSeF
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KsefApi\Model;

use \ArrayAccess;
use \KsefApi\ObjectSerializer;

/**
 * Faktura Class Doc Comment
 *
 * @category Class
 * @description Faktura VAT
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Faktura implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Faktura';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'naglowek' => '\KsefApi\Model\TNaglowek',
        'podmiot1' => '\KsefApi\Model\Podmiot1',
        'podmiot2' => '\KsefApi\Model\Podmiot2',
        'podmiot3' => '\KsefApi\Model\Podmiot3[]',
        'podmiot_upowazniony' => '\KsefApi\Model\PodmiotUpowazniony',
        'fa' => '\KsefApi\Model\Fa',
        'stopka' => '\KsefApi\Model\Stopka'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'naglowek' => null,
        'podmiot1' => null,
        'podmiot2' => null,
        'podmiot3' => null,
        'podmiot_upowazniony' => null,
        'fa' => null,
        'stopka' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'naglowek' => 'Naglowek',
        'podmiot1' => 'Podmiot1',
        'podmiot2' => 'Podmiot2',
        'podmiot3' => 'Podmiot3',
        'podmiot_upowazniony' => 'PodmiotUpowazniony',
        'fa' => 'Fa',
        'stopka' => 'Stopka'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'naglowek' => 'setNaglowek',
        'podmiot1' => 'setPodmiot1',
        'podmiot2' => 'setPodmiot2',
        'podmiot3' => 'setPodmiot3',
        'podmiot_upowazniony' => 'setPodmiotUpowazniony',
        'fa' => 'setFa',
        'stopka' => 'setStopka'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'naglowek' => 'getNaglowek',
        'podmiot1' => 'getPodmiot1',
        'podmiot2' => 'getPodmiot2',
        'podmiot3' => 'getPodmiot3',
        'podmiot_upowazniony' => 'getPodmiotUpowazniony',
        'fa' => 'getFa',
        'stopka' => 'getStopka'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['naglowek'] = isset($data['naglowek']) ? $data['naglowek'] : null;
        $this->container['podmiot1'] = isset($data['podmiot1']) ? $data['podmiot1'] : null;
        $this->container['podmiot2'] = isset($data['podmiot2']) ? $data['podmiot2'] : null;
        $this->container['podmiot3'] = isset($data['podmiot3']) ? $data['podmiot3'] : null;
        $this->container['podmiot_upowazniony'] = isset($data['podmiot_upowazniony']) ? $data['podmiot_upowazniony'] : null;
        $this->container['fa'] = isset($data['fa']) ? $data['fa'] : null;
        $this->container['stopka'] = isset($data['stopka']) ? $data['stopka'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['naglowek'] === null) {
            $invalidProperties[] = "'naglowek' can't be null";
        }
        if ($this->container['podmiot1'] === null) {
            $invalidProperties[] = "'podmiot1' can't be null";
        }
        if ($this->container['podmiot2'] === null) {
            $invalidProperties[] = "'podmiot2' can't be null";
        }
        if ($this->container['fa'] === null) {
            $invalidProperties[] = "'fa' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets naglowek
     *
     * @return \KsefApi\Model\TNaglowek
     */
    public function getNaglowek()
    {
        return $this->container['naglowek'];
    }

    /**
     * Sets naglowek
     *
     * @param \KsefApi\Model\TNaglowek $naglowek naglowek
     *
     * @return $this
     */
    public function setNaglowek($naglowek)
    {
        $this->container['naglowek'] = $naglowek;

        return $this;
    }

    /**
     * Gets podmiot1
     *
     * @return \KsefApi\Model\Podmiot1
     */
    public function getPodmiot1()
    {
        return $this->container['podmiot1'];
    }

    /**
     * Sets podmiot1
     *
     * @param \KsefApi\Model\Podmiot1 $podmiot1 podmiot1
     *
     * @return $this
     */
    public function setPodmiot1($podmiot1)
    {
        $this->container['podmiot1'] = $podmiot1;

        return $this;
    }

    /**
     * Gets podmiot2
     *
     * @return \KsefApi\Model\Podmiot2
     */
    public function getPodmiot2()
    {
        return $this->container['podmiot2'];
    }

    /**
     * Sets podmiot2
     *
     * @param \KsefApi\Model\Podmiot2 $podmiot2 podmiot2
     *
     * @return $this
     */
    public function setPodmiot2($podmiot2)
    {
        $this->container['podmiot2'] = $podmiot2;

        return $this;
    }

    /**
     * Gets podmiot3
     *
     * @return \KsefApi\Model\Podmiot3[]
     */
    public function getPodmiot3()
    {
        return $this->container['podmiot3'];
    }

    /**
     * Sets podmiot3
     *
     * @param \KsefApi\Model\Podmiot3[] $podmiot3 podmiot3
     *
     * @return $this
     */
    public function setPodmiot3($podmiot3)
    {
        $this->container['podmiot3'] = $podmiot3;

        return $this;
    }

    /**
     * Gets podmiot_upowazniony
     *
     * @return \KsefApi\Model\PodmiotUpowazniony
     */
    public function getPodmiotUpowazniony()
    {
        return $this->container['podmiot_upowazniony'];
    }

    /**
     * Sets podmiot_upowazniony
     *
     * @param \KsefApi\Model\PodmiotUpowazniony $podmiot_upowazniony podmiot_upowazniony
     *
     * @return $this
     */
    public function setPodmiotUpowazniony($podmiot_upowazniony)
    {
        $this->container['podmiot_upowazniony'] = $podmiot_upowazniony;

        return $this;
    }

    /**
     * Gets fa
     *
     * @return \KsefApi\Model\Fa
     */
    public function getFa()
    {
        return $this->container['fa'];
    }

    /**
     * Sets fa
     *
     * @param \KsefApi\Model\Fa $fa fa
     *
     * @return $this
     */
    public function setFa($fa)
    {
        $this->container['fa'] = $fa;

        return $this;
    }

    /**
     * Gets stopka
     *
     * @return \KsefApi\Model\Stopka
     */
    public function getStopka()
    {
        return $this->container['stopka'];
    }

    /**
     * Sets stopka
     *
     * @param \KsefApi\Model\Stopka $stopka stopka
     *
     * @return $this
     */
    public function setStopka($stopka)
    {
        $this->container['stopka'] = $stopka;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
