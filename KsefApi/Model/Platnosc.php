<?php
/**
 * Platnosc
 *
 * PHP version 5
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KSeF API
 *
 * API do systemu KSeF
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KsefApi\Model;

use \ArrayAccess;
use \KsefApi\ObjectSerializer;

/**
 * Platnosc Class Doc Comment
 *
 * @category Class
 * @description Warunki płatności
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Platnosc implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Platnosc';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'zaplacono' => '\KsefApi\Model\TWybor1',
        'data_zaplaty' => '\KsefApi\Model\TData',
        'znacznik_zaplaty_czesciowej' => '\KsefApi\Model\TWybor1',
        'zaplata_czesciowa' => '\KsefApi\Model\ZaplataCzesciowa[]',
        'termin_platnosci' => '\KsefApi\Model\TerminPlatnosci[]',
        'forma_platnosci' => '\KsefApi\Model\TFormaPlatnosci',
        'platnosc_inna' => '\KsefApi\Model\TWybor1',
        'opis_platnosci' => '\KsefApi\Model\TZnakowy',
        'rachunek_bankowy' => '\KsefApi\Model\TRachunekBankowy[]',
        'rachunek_bankowy_faktora' => '\KsefApi\Model\TRachunekBankowy[]',
        'skonto' => '\KsefApi\Model\Skonto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'zaplacono' => null,
        'data_zaplaty' => null,
        'znacznik_zaplaty_czesciowej' => null,
        'zaplata_czesciowa' => null,
        'termin_platnosci' => null,
        'forma_platnosci' => null,
        'platnosc_inna' => null,
        'opis_platnosci' => null,
        'rachunek_bankowy' => null,
        'rachunek_bankowy_faktora' => null,
        'skonto' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'zaplacono' => 'Zaplacono',
        'data_zaplaty' => 'DataZaplaty',
        'znacznik_zaplaty_czesciowej' => 'ZnacznikZaplatyCzesciowej',
        'zaplata_czesciowa' => 'ZaplataCzesciowa',
        'termin_platnosci' => 'TerminPlatnosci',
        'forma_platnosci' => 'FormaPlatnosci',
        'platnosc_inna' => 'PlatnoscInna',
        'opis_platnosci' => 'OpisPlatnosci',
        'rachunek_bankowy' => 'RachunekBankowy',
        'rachunek_bankowy_faktora' => 'RachunekBankowyFaktora',
        'skonto' => 'Skonto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'zaplacono' => 'setZaplacono',
        'data_zaplaty' => 'setDataZaplaty',
        'znacznik_zaplaty_czesciowej' => 'setZnacznikZaplatyCzesciowej',
        'zaplata_czesciowa' => 'setZaplataCzesciowa',
        'termin_platnosci' => 'setTerminPlatnosci',
        'forma_platnosci' => 'setFormaPlatnosci',
        'platnosc_inna' => 'setPlatnoscInna',
        'opis_platnosci' => 'setOpisPlatnosci',
        'rachunek_bankowy' => 'setRachunekBankowy',
        'rachunek_bankowy_faktora' => 'setRachunekBankowyFaktora',
        'skonto' => 'setSkonto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'zaplacono' => 'getZaplacono',
        'data_zaplaty' => 'getDataZaplaty',
        'znacznik_zaplaty_czesciowej' => 'getZnacznikZaplatyCzesciowej',
        'zaplata_czesciowa' => 'getZaplataCzesciowa',
        'termin_platnosci' => 'getTerminPlatnosci',
        'forma_platnosci' => 'getFormaPlatnosci',
        'platnosc_inna' => 'getPlatnoscInna',
        'opis_platnosci' => 'getOpisPlatnosci',
        'rachunek_bankowy' => 'getRachunekBankowy',
        'rachunek_bankowy_faktora' => 'getRachunekBankowyFaktora',
        'skonto' => 'getSkonto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['zaplacono'] = isset($data['zaplacono']) ? $data['zaplacono'] : null;
        $this->container['data_zaplaty'] = isset($data['data_zaplaty']) ? $data['data_zaplaty'] : null;
        $this->container['znacznik_zaplaty_czesciowej'] = isset($data['znacznik_zaplaty_czesciowej']) ? $data['znacznik_zaplaty_czesciowej'] : null;
        $this->container['zaplata_czesciowa'] = isset($data['zaplata_czesciowa']) ? $data['zaplata_czesciowa'] : null;
        $this->container['termin_platnosci'] = isset($data['termin_platnosci']) ? $data['termin_platnosci'] : null;
        $this->container['forma_platnosci'] = isset($data['forma_platnosci']) ? $data['forma_platnosci'] : null;
        $this->container['platnosc_inna'] = isset($data['platnosc_inna']) ? $data['platnosc_inna'] : null;
        $this->container['opis_platnosci'] = isset($data['opis_platnosci']) ? $data['opis_platnosci'] : null;
        $this->container['rachunek_bankowy'] = isset($data['rachunek_bankowy']) ? $data['rachunek_bankowy'] : null;
        $this->container['rachunek_bankowy_faktora'] = isset($data['rachunek_bankowy_faktora']) ? $data['rachunek_bankowy_faktora'] : null;
        $this->container['skonto'] = isset($data['skonto']) ? $data['skonto'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets zaplacono
     *
     * @return \KsefApi\Model\TWybor1
     */
    public function getZaplacono()
    {
        return $this->container['zaplacono'];
    }

    /**
     * Sets zaplacono
     *
     * @param \KsefApi\Model\TWybor1 $zaplacono zaplacono
     *
     * @return $this
     */
    public function setZaplacono($zaplacono)
    {
        $this->container['zaplacono'] = $zaplacono;

        return $this;
    }

    /**
     * Gets data_zaplaty
     *
     * @return \KsefApi\Model\TData
     */
    public function getDataZaplaty()
    {
        return $this->container['data_zaplaty'];
    }

    /**
     * Sets data_zaplaty
     *
     * @param \KsefApi\Model\TData $data_zaplaty data_zaplaty
     *
     * @return $this
     */
    public function setDataZaplaty($data_zaplaty)
    {
        $this->container['data_zaplaty'] = $data_zaplaty;

        return $this;
    }

    /**
     * Gets znacznik_zaplaty_czesciowej
     *
     * @return \KsefApi\Model\TWybor1
     */
    public function getZnacznikZaplatyCzesciowej()
    {
        return $this->container['znacznik_zaplaty_czesciowej'];
    }

    /**
     * Sets znacznik_zaplaty_czesciowej
     *
     * @param \KsefApi\Model\TWybor1 $znacznik_zaplaty_czesciowej znacznik_zaplaty_czesciowej
     *
     * @return $this
     */
    public function setZnacznikZaplatyCzesciowej($znacznik_zaplaty_czesciowej)
    {
        $this->container['znacznik_zaplaty_czesciowej'] = $znacznik_zaplaty_czesciowej;

        return $this;
    }

    /**
     * Gets zaplata_czesciowa
     *
     * @return \KsefApi\Model\ZaplataCzesciowa[]
     */
    public function getZaplataCzesciowa()
    {
        return $this->container['zaplata_czesciowa'];
    }

    /**
     * Sets zaplata_czesciowa
     *
     * @param \KsefApi\Model\ZaplataCzesciowa[] $zaplata_czesciowa zaplata_czesciowa
     *
     * @return $this
     */
    public function setZaplataCzesciowa($zaplata_czesciowa)
    {
        $this->container['zaplata_czesciowa'] = $zaplata_czesciowa;

        return $this;
    }

    /**
     * Gets termin_platnosci
     *
     * @return \KsefApi\Model\TerminPlatnosci[]
     */
    public function getTerminPlatnosci()
    {
        return $this->container['termin_platnosci'];
    }

    /**
     * Sets termin_platnosci
     *
     * @param \KsefApi\Model\TerminPlatnosci[] $termin_platnosci termin_platnosci
     *
     * @return $this
     */
    public function setTerminPlatnosci($termin_platnosci)
    {
        $this->container['termin_platnosci'] = $termin_platnosci;

        return $this;
    }

    /**
     * Gets forma_platnosci
     *
     * @return \KsefApi\Model\TFormaPlatnosci
     */
    public function getFormaPlatnosci()
    {
        return $this->container['forma_platnosci'];
    }

    /**
     * Sets forma_platnosci
     *
     * @param \KsefApi\Model\TFormaPlatnosci $forma_platnosci forma_platnosci
     *
     * @return $this
     */
    public function setFormaPlatnosci($forma_platnosci)
    {
        $this->container['forma_platnosci'] = $forma_platnosci;

        return $this;
    }

    /**
     * Gets platnosc_inna
     *
     * @return \KsefApi\Model\TWybor1
     */
    public function getPlatnoscInna()
    {
        return $this->container['platnosc_inna'];
    }

    /**
     * Sets platnosc_inna
     *
     * @param \KsefApi\Model\TWybor1 $platnosc_inna platnosc_inna
     *
     * @return $this
     */
    public function setPlatnoscInna($platnosc_inna)
    {
        $this->container['platnosc_inna'] = $platnosc_inna;

        return $this;
    }

    /**
     * Gets opis_platnosci
     *
     * @return \KsefApi\Model\TZnakowy
     */
    public function getOpisPlatnosci()
    {
        return $this->container['opis_platnosci'];
    }

    /**
     * Sets opis_platnosci
     *
     * @param \KsefApi\Model\TZnakowy $opis_platnosci opis_platnosci
     *
     * @return $this
     */
    public function setOpisPlatnosci($opis_platnosci)
    {
        $this->container['opis_platnosci'] = $opis_platnosci;

        return $this;
    }

    /**
     * Gets rachunek_bankowy
     *
     * @return \KsefApi\Model\TRachunekBankowy[]
     */
    public function getRachunekBankowy()
    {
        return $this->container['rachunek_bankowy'];
    }

    /**
     * Sets rachunek_bankowy
     *
     * @param \KsefApi\Model\TRachunekBankowy[] $rachunek_bankowy rachunek_bankowy
     *
     * @return $this
     */
    public function setRachunekBankowy($rachunek_bankowy)
    {
        $this->container['rachunek_bankowy'] = $rachunek_bankowy;

        return $this;
    }

    /**
     * Gets rachunek_bankowy_faktora
     *
     * @return \KsefApi\Model\TRachunekBankowy[]
     */
    public function getRachunekBankowyFaktora()
    {
        return $this->container['rachunek_bankowy_faktora'];
    }

    /**
     * Sets rachunek_bankowy_faktora
     *
     * @param \KsefApi\Model\TRachunekBankowy[] $rachunek_bankowy_faktora rachunek_bankowy_faktora
     *
     * @return $this
     */
    public function setRachunekBankowyFaktora($rachunek_bankowy_faktora)
    {
        $this->container['rachunek_bankowy_faktora'] = $rachunek_bankowy_faktora;

        return $this;
    }

    /**
     * Gets skonto
     *
     * @return \KsefApi\Model\Skonto
     */
    public function getSkonto()
    {
        return $this->container['skonto'];
    }

    /**
     * Sets skonto
     *
     * @param \KsefApi\Model\Skonto $skonto skonto
     *
     * @return $this
     */
    public function setSkonto($skonto)
    {
        $this->container['skonto'] = $skonto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
