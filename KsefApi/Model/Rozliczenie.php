<?php
/**
 * Rozliczenie
 *
 * PHP version 5
 *
 * @category Class
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KSeF API
 *
 * API do systemu KSeF
 *
 * OpenAPI spec version: 1.2.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.52
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KsefApi\Model;

use \ArrayAccess;
use \KsefApi\ObjectSerializer;

/**
 * Rozliczenie Class Doc Comment
 *
 * @category Class
 * @description Dodatkowe rozliczenia na fakturze
 * @package  KsefApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Rozliczenie implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Rozliczenie';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'obciazenia' => '\KsefApi\Model\Obciazenia[]',
        'suma_obciazen' => '\KsefApi\Model\TKwotowy',
        'odliczenia' => '\KsefApi\Model\Odliczenia[]',
        'suma_odliczen' => '\KsefApi\Model\TKwotowy',
        'do_zaplaty' => '\KsefApi\Model\TKwotowy',
        'do_rozliczenia' => '\KsefApi\Model\TKwotowy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'obciazenia' => null,
        'suma_obciazen' => null,
        'odliczenia' => null,
        'suma_odliczen' => null,
        'do_zaplaty' => null,
        'do_rozliczenia' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'obciazenia' => 'Obciazenia',
        'suma_obciazen' => 'SumaObciazen',
        'odliczenia' => 'Odliczenia',
        'suma_odliczen' => 'SumaOdliczen',
        'do_zaplaty' => 'DoZaplaty',
        'do_rozliczenia' => 'DoRozliczenia'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'obciazenia' => 'setObciazenia',
        'suma_obciazen' => 'setSumaObciazen',
        'odliczenia' => 'setOdliczenia',
        'suma_odliczen' => 'setSumaOdliczen',
        'do_zaplaty' => 'setDoZaplaty',
        'do_rozliczenia' => 'setDoRozliczenia'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'obciazenia' => 'getObciazenia',
        'suma_obciazen' => 'getSumaObciazen',
        'odliczenia' => 'getOdliczenia',
        'suma_odliczen' => 'getSumaOdliczen',
        'do_zaplaty' => 'getDoZaplaty',
        'do_rozliczenia' => 'getDoRozliczenia'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['obciazenia'] = isset($data['obciazenia']) ? $data['obciazenia'] : null;
        $this->container['suma_obciazen'] = isset($data['suma_obciazen']) ? $data['suma_obciazen'] : null;
        $this->container['odliczenia'] = isset($data['odliczenia']) ? $data['odliczenia'] : null;
        $this->container['suma_odliczen'] = isset($data['suma_odliczen']) ? $data['suma_odliczen'] : null;
        $this->container['do_zaplaty'] = isset($data['do_zaplaty']) ? $data['do_zaplaty'] : null;
        $this->container['do_rozliczenia'] = isset($data['do_rozliczenia']) ? $data['do_rozliczenia'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets obciazenia
     *
     * @return \KsefApi\Model\Obciazenia[]
     */
    public function getObciazenia()
    {
        return $this->container['obciazenia'];
    }

    /**
     * Sets obciazenia
     *
     * @param \KsefApi\Model\Obciazenia[] $obciazenia obciazenia
     *
     * @return $this
     */
    public function setObciazenia($obciazenia)
    {
        $this->container['obciazenia'] = $obciazenia;

        return $this;
    }

    /**
     * Gets suma_obciazen
     *
     * @return \KsefApi\Model\TKwotowy
     */
    public function getSumaObciazen()
    {
        return $this->container['suma_obciazen'];
    }

    /**
     * Sets suma_obciazen
     *
     * @param \KsefApi\Model\TKwotowy $suma_obciazen suma_obciazen
     *
     * @return $this
     */
    public function setSumaObciazen($suma_obciazen)
    {
        $this->container['suma_obciazen'] = $suma_obciazen;

        return $this;
    }

    /**
     * Gets odliczenia
     *
     * @return \KsefApi\Model\Odliczenia[]
     */
    public function getOdliczenia()
    {
        return $this->container['odliczenia'];
    }

    /**
     * Sets odliczenia
     *
     * @param \KsefApi\Model\Odliczenia[] $odliczenia odliczenia
     *
     * @return $this
     */
    public function setOdliczenia($odliczenia)
    {
        $this->container['odliczenia'] = $odliczenia;

        return $this;
    }

    /**
     * Gets suma_odliczen
     *
     * @return \KsefApi\Model\TKwotowy
     */
    public function getSumaOdliczen()
    {
        return $this->container['suma_odliczen'];
    }

    /**
     * Sets suma_odliczen
     *
     * @param \KsefApi\Model\TKwotowy $suma_odliczen suma_odliczen
     *
     * @return $this
     */
    public function setSumaOdliczen($suma_odliczen)
    {
        $this->container['suma_odliczen'] = $suma_odliczen;

        return $this;
    }

    /**
     * Gets do_zaplaty
     *
     * @return \KsefApi\Model\TKwotowy
     */
    public function getDoZaplaty()
    {
        return $this->container['do_zaplaty'];
    }

    /**
     * Sets do_zaplaty
     *
     * @param \KsefApi\Model\TKwotowy $do_zaplaty do_zaplaty
     *
     * @return $this
     */
    public function setDoZaplaty($do_zaplaty)
    {
        $this->container['do_zaplaty'] = $do_zaplaty;

        return $this;
    }

    /**
     * Gets do_rozliczenia
     *
     * @return \KsefApi\Model\TKwotowy
     */
    public function getDoRozliczenia()
    {
        return $this->container['do_rozliczenia'];
    }

    /**
     * Sets do_rozliczenia
     *
     * @param \KsefApi\Model\TKwotowy $do_rozliczenia do_rozliczenia
     *
     * @return $this
     */
    public function setDoRozliczenia($do_rozliczenia)
    {
        $this->container['do_rozliczenia'] = $do_rozliczenia;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
